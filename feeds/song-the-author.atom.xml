<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Song's blog on the Github 2017 - Song the author</title><link href="http://songgithub.github.io/" rel="alternate"></link><link href="http://songgithub.github.io/feeds/song-the-author.atom.xml" rel="self"></link><id>http://songgithub.github.io/</id><updated>2014-04-09T16:00:00+10:00</updated><entry><title>The admired people</title><link href="http://songgithub.github.io/posts/2014/04/admired/" rel="alternate"></link><published>2014-04-09T16:00:00+10:00</published><updated>2014-04-09T16:00:00+10:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-04-09:/posts/2014/04/admired/</id><summary type="html">&lt;p class="first last"&gt;High achieving people that I admire&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="roy-fileding"&gt;
&lt;h2&gt;Roy. Fileding&lt;/h2&gt;
&lt;p&gt;When trying gain understanding of REST framework, there is a key person I can't avoid. He is Roy who invented the RESTful framework in his dissertation. The thesis then stood out from majority doctoral papers that were less influential to human IT infrastructure. I am very interested in how did he come up with such a invovative idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="addy-osmani"&gt;
&lt;h2&gt;Addy Osmani&lt;/h2&gt;
&lt;p&gt;He is a guru in JavaScript. I knew him through his 'todoMVC.com' when I studied JavaScript frameworks. Followed his link, I reached his Github repositories. What amazed me were the number of famous organisations he has worked for, and 6 thousand Github followers.&lt;/p&gt;
&lt;div class="section" id="reflection"&gt;
&lt;h3&gt;Reflection&lt;/h3&gt;
&lt;p&gt;I am keen to know what make a great person in his field. And I am dreaming one day I can contribute to community and humanity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="people"></category><category term="invotative"></category></entry><entry><title>Front-end jobs for the todolist project</title><link href="http://songgithub.github.io/posts/2014/04/frontend/" rel="alternate"></link><published>2014-04-03T16:00:00+11:00</published><updated>2014-04-03T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-04-03:/posts/2014/04/frontend/</id><summary type="html">&lt;p class="first last"&gt;Face-lifting work on the 2dolist&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="css-fix"&gt;
&lt;h2&gt;CSS fix&lt;/h2&gt;
&lt;p&gt;Fixed scattered styling commands, and organised them into single style.css file which is referred in base html page. By loose-coupling styling instructions from html, I can make source code neater, and bring in ease of maintenance for later cycles of the app. Also, it fits into common practice in the industry better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-of-bootstrap"&gt;
&lt;h2&gt;Integration of Bootstrap&lt;/h2&gt;
&lt;p&gt;I can't emphasise more on how important a user-friendly interface is. So instead of just implementing back end work and leaving it ugly, I integrated Bootstrap, which serves as a cosmetic improvement into it.
Besides leaning how to put common Bootstrap components into the form like buttons, nav-bar, drop down menus and text area, I also found and installed toggle-switch and bootstrap3-datetimepicker so that boolean input and calender input can have visual effect close to what is on iPhone (iOS system).&lt;/p&gt;
&lt;/div&gt;
</content><category term="CSS"></category><category term="HTML"></category><category term="Bootstrap"></category></entry><entry><title>The Project Djangology</title><link href="http://songgithub.github.io/posts/2014/04/project_ellingtonia/" rel="alternate"></link><published>2014-04-03T16:00:00+11:00</published><updated>2014-04-03T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-04-03:/posts/2014/04/project_ellingtonia/</id><summary type="html">&lt;p class="first last"&gt;about the project Djangology&lt;/p&gt;
</summary><content type="html"></content><category term="Flask"></category><category term="Jinja2"></category></entry><entry><title>To build a web service</title><link href="http://songgithub.github.io/posts/2014/04/web_service/" rel="alternate"></link><published>2014-04-03T16:00:00+11:00</published><updated>2014-04-03T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-04-03:/posts/2014/04/web_service/</id><summary type="html">&lt;p class="first last"&gt;Motivation to build project 'Djangology'&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Recently when reading a site named 'todoMVC' which is a MVC framework comparision site, I came across the site author Addy OSMANI. Digged a little deeper, I found his Github, blog and current projects. His motto is quite admired by me: 'First DO it, then do it better'.&lt;/p&gt;
&lt;p&gt;Therefore I think it is a good idea to improve the todolist project with whole new bunch of the latest technologies. Thinking of these, a new project is on the way.&lt;/p&gt;
&lt;p&gt;Following same naming convention, I named it after the third album from Jean'Django' Reinhardt which is 'Djangology'&lt;/p&gt;
</content><category term="Backbone.js"></category><category term="RESTful API"></category></entry><entry><title>The Project Ellingtonia</title><link href="http://songgithub.github.io/posts/2014/03/ellingtonia/" rel="alternate"></link><published>2014-03-25T16:00:00+11:00</published><updated>2014-03-25T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-03-25:/posts/2014/03/ellingtonia/</id><summary type="html">&lt;p class="first last"&gt;Things about the project Ellingtonia&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="ellingtonia"&gt;
&lt;h2&gt;Ellingtonia&lt;/h2&gt;
&lt;p&gt;The 'ellingtonia' is a documentation organiser.&lt;/p&gt;
&lt;p&gt;It is an app created for Tangent Snowball Australia's documentation site, managing content structure by comany and project name.&lt;/p&gt;
&lt;p&gt;The name of the app 'ellingtonia' is inspired by Guitarist Django's second album with the same name, as the app is my second Django project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-to-be-solved"&gt;
&lt;h2&gt;'Problem to be solved'&lt;/h2&gt;
&lt;blockquote&gt;
company's documentation site needs to be more organised, by client's company names then project names. The app will run on server and dynamatically read documents' up-to-date directory structure and generate a structured view to sort projects by company name, then project names.&lt;/blockquote&gt;
&lt;p&gt;It was suggested to use Flask which compromises Werkzeug, Jinja2, and 'Good intentions'.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="approach-i-came-i-saw-i-divide-and-i-conquer"&gt;
&lt;h2&gt;Approach: I came, I saw, I divide, and I conquer&lt;/h2&gt;
&lt;p&gt;Conquer of the problem compromises 3 separate phrases/components. First the program reads the directory structure, then it feeds content into Jinja2 in a desirable format. At last it Jinja generates view which is hosted by Flask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="result"&gt;
&lt;h2&gt;Result:&lt;/h2&gt;
&lt;p&gt;It was successfully implemented with Jinja2 module in the Flask but served by uWSGI.
And the url of the project is &lt;a class="reference external" href="https://github.com/SongGithub/ellingtonia"&gt;https://github.com/SongGithub/ellingtonia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Flask"></category><category term="Jinja2"></category></entry><entry><title>Add icon on websites</title><link href="http://songgithub.github.io/posts/2014/03/icon/" rel="alternate"></link><published>2014-03-14T16:00:00+11:00</published><updated>2014-03-14T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-03-14:/posts/2014/03/icon/</id><summary type="html">&lt;p class="first last"&gt;About how I put icon on my sites&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The gap between my sites and well-established sites has been my motivations to learn. Today, the gap I realised is the icon. The tiny little icon on visitors' browser tab and bookmark menu really makes website unique and having more visual impact on visitors rather than abstract text.&lt;/p&gt;
&lt;div class="section" id="steps"&gt;
&lt;h2&gt;Steps:&lt;/h2&gt;
&lt;div class="section" id="generate-an-icon"&gt;
&lt;h3&gt;1. Generate an icon&lt;/h3&gt;
&lt;p&gt;There are many on-line icon generating sites available. Google out one of them, upload your local picture, then it will be downloaded after you select size which is typically 32X32. Hint here is you'd better chop your upload photo into square shape locally before uploading it, otherwise the photo would be distorted in ugly way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upload-the-photo-onto-photo-hosting-sites"&gt;
&lt;h3&gt;2. Upload the photo onto photo-hosting sites&lt;/h3&gt;
&lt;p&gt;It is always to use reputable service rather than those would vanish in near future. In my case, I used Gravatar which is same photo-host for my profile on Github and Linkedin. Afterwards, I copied the link to this photo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="find-out-appropiate-place-in-your-site-to-put-icon-s-link"&gt;
&lt;h3&gt;3. Find out appropiate place in your site to put icon's link&lt;/h3&gt;
&lt;p&gt;I found it is handy to put the link in header section of the base file of HTML files. For pelican blog, I put it in the base.html of the theme template I am using. Then uninstall current one, re-install it. For my app on heroku, it is easier, just put the link on base.html.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="verify-the-change-locally-and-push-modified-sites-up-to-servers"&gt;
&lt;h3&gt;4. Verify the change locally and Push modified sites up to servers&lt;/h3&gt;
&lt;p&gt;I tested both sites locally, making sure they were fine. Then push them up to servers. Voala! I found my icons (my head) on browser tabs!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="icon"></category><category term="website"></category><category term="decoration"></category><category term="todolist"></category><category term="pelicanblog"></category></entry><entry><title>The deeper you dig, the more you explore</title><link href="http://songgithub.github.io/posts/2014/03/thedeeperthebetter/" rel="alternate"></link><published>2014-03-05T00:00:00+11:00</published><updated>2014-03-05T00:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-03-05:/posts/2014/03/thedeeperthebetter/</id><summary type="html">&lt;p class="first last"&gt;getting to learning more by doing more&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="my-observation-today-is-the-deeper-i-dig-the-more-i-can-explore"&gt;
&lt;h2&gt;My observation today is the deeper I dig, the more I can explore&lt;/h2&gt;
&lt;p&gt;For the pelican blog, I have been strictly following pelican site's instuctions, especially the way I serve the website. However, the method named 'simpleHTTP' has strange habbit that randomly delaying my changes on website. It seems to have its own mind which rander itself very unreliable. I've got fed up by this, so I need a solution for this problem.&lt;/p&gt;
&lt;div class="section" id="gold-digged-out-today"&gt;
&lt;h3&gt;Gold Digged out today&lt;/h3&gt;
&lt;p&gt;By the end of the day, I discuss this with Moose. Besides recommendation that 'simply run the static site by click on index.html in the output folder', he also advised me industial practice of using 'uwisg' to serve (Ngnix for remote end runs). Even more, when we looked into source code of uwisg, unix sockets that work on lower level of hierarchy, revealed which are something new for me. I am so glad to know what could have been done better, like discovered trace of gold after days of hard digging in this hole named Pelican blogging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="professional"></category><category term="ngix"></category><category term="uwsgi"></category></entry><entry><title>Project: Chinese-translation-OscarDjango</title><link href="http://songgithub.github.io/posts/2014/03/translations/" rel="alternate"></link><published>2014-03-04T16:00:00+11:00</published><updated>2014-03-04T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-03-04:/posts/2014/03/translations/</id><summary type="html">&lt;p class="first last"&gt;My contribution to Oscar, an open source platform in Django&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I am glad to have my contribution integrated into the Oscar, which is an open source platform in Django developed by Tangent for building eCommerce website swiftly.&lt;/p&gt;
&lt;p&gt;On 4 Mar, 2014, Moose wanted me to translate Oscar into Chinese so that the platform can be available for Chinese stakeholders(especially for end-users).&lt;/p&gt;
&lt;p&gt;I joined Transifex.com for the project, which has 1,900 keyword to workon, and 40% translation done. I started out reviewing 700 existing translations, fixed a few inapproiate translations. Then carried on translation for the un-translated.&lt;/p&gt;
&lt;p&gt;Challeges are more from technical side rather than language side. The translation for software project does require in-depth understanding toward structure and functionality. Especially for Chinese which is a context-related language, one can't make sense from a word without reference to context around the word. Therefore, translator has to be technical enough to read code and understand things under the hood. As a result, most of my time in the project are spent on analysing source code or discussing with coworkers who have been working on Oscar.&lt;/p&gt;
&lt;p&gt;Therefore, besides translation, I will gain more technical understanding about Oscar/Django.&lt;/p&gt;
</content><category term="chinese"></category><category term="translation"></category><category term="oscar"></category><category term="project"></category><category term="django"></category></entry><entry><title>Better ways that help to land an IT job quickly</title><link href="http://songgithub.github.io/posts/2014/03/my-intern3/" rel="alternate"></link><published>2014-03-04T00:00:00+11:00</published><updated>2014-03-04T00:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-03-04:/posts/2014/03/my-intern3/</id><summary type="html">&lt;p class="first last"&gt;On how to land an IT job quickly&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I came across this [blog] on IT job seeking and got inspired.&lt;/p&gt;
&lt;div class="section" id="i-summarise-points-as-follows"&gt;
&lt;h2&gt;I summarise points as follows:&lt;/h2&gt;
&lt;div class="section" id="identify-your-learning-methods"&gt;
&lt;h3&gt;Identify your learning methods&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;List books and codes you've read. The list identify your passion in the field at least.&lt;/li&gt;
&lt;li&gt;Have account on the StackOverflow, projects on the Github&lt;/li&gt;
&lt;li&gt;Have own site&lt;/li&gt;
&lt;li&gt;Read blogs&lt;/li&gt;
&lt;li&gt;Find role models in the direction you after.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="state-facts-no-vague-descriptors"&gt;
&lt;h3&gt;State facts, no vague descriptors&lt;/h3&gt;
&lt;p&gt;Exact amount of projects done speak louder than adjectives like 'Strong skills in xxx, solid knowledge about yyy'.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-work"&gt;
&lt;h3&gt;Your work&lt;/h3&gt;
&lt;p&gt;As said above, actual work prove what skills you really master. It is COOL to post a 2D bar code of my websites' URL on resume&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tricks-on-resume"&gt;
&lt;h3&gt;Tricks on resume&lt;/h3&gt;
&lt;p&gt;[blog]: &lt;a class="reference external" href="http://www.cnblogs.com/MrMystery/archive/2013/06/07/3123099.html"&gt;http://www.cnblogs.com/MrMystery/archive/2013/06/07/3123099.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="jobseeking"></category></entry><entry><title>Project: To do list app</title><link href="http://songgithub.github.io/posts/2014/03/todolist/" rel="alternate"></link><published>2014-03-03T16:00:00+11:00</published><updated>2014-03-03T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-03-03:/posts/2014/03/todolist/</id><summary type="html">&lt;p class="first last"&gt;project in django&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I was asked to practise what I've learnt. In particular, build a to do list app.&lt;/p&gt;
&lt;p&gt;Technologies ultilised in the project are: Django, Django/views, Bootstrap/CSS, HTML, git(as version control tool), Heroku(as host), virtualenv.&lt;/p&gt;
&lt;p&gt;As an initiative, I found Heroku in order to take my site online. However, it did take me some effort to understand how it work. Currently, the site is up-and-running with URL &lt;a class="reference external" href="http://songs-todolist.herokuapp.com"&gt;http://songs-todolist.herokuapp.com&lt;/a&gt;. Also, the source code is available in repository '2DoList'&lt;/p&gt;
&lt;p&gt;To make it better, I am planning to add more desirable features in my own time, as a hobby. Features in mind now are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;user account management/access control&lt;/li&gt;
&lt;li&gt;Media query/CSS3&lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It took me less than a week to finish, with kind assistance from coworker Frank and Moose.&lt;/p&gt;
</content><category term="project"></category><category term="todolist"></category><category term="app"></category><category term="django"></category></entry><entry><title>Tech Tree</title><link href="http://songgithub.github.io/posts/2014/02/my-1st-skills/" rel="alternate"></link><published>2014-02-28T16:00:00+11:00</published><updated>2014-02-28T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-02-28:/posts/2014/02/my-1st-skills/</id><summary type="html">&lt;p class="first last"&gt;skill set&lt;/p&gt;
</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Skill Wanted:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSS3, especially media query&lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;/ul&gt;
</content><category term="pelican"></category><category term="blog"></category></entry><entry><title>The beginning</title><link href="http://songgithub.github.io/posts/2014/02/my-intern1/" rel="alternate"></link><published>2014-02-28T16:00:00+11:00</published><updated>2014-02-28T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-02-28:/posts/2014/02/my-intern1/</id><summary type="html">&lt;p class="first last"&gt;how I start the internship&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Gday!&lt;/p&gt;
&lt;p&gt;There is a deadlock in tight IT job martket: As a fresh graduate you need experience to be considered for a position, but you can't get commercial experience unless you get a job.&lt;/p&gt;
&lt;p&gt;Fortunately I was inspired by my girlfriend L that a better way to break the deadlock is to be an intern.&lt;/p&gt;
&lt;p&gt;So I join the Tangent Snowball Australia as an intern.&lt;/p&gt;
</content><category term="intern"></category></entry><entry><title>The tutorial learning</title><link href="http://songgithub.github.io/posts/2014/02/my-intern2/" rel="alternate"></link><published>2014-02-28T16:00:00+11:00</published><updated>2014-02-28T16:00:00+11:00</updated><author><name>Song the author</name></author><id>tag:songgithub.github.io,2014-02-28:/posts/2014/02/my-intern2/</id><summary type="html">&lt;p class="first last"&gt;tutorial&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Gday!&lt;/p&gt;
&lt;p&gt;I was asked to go through Tut about Django on official doc site. And I overcame the steep learning curve, became familiar with the framework.&lt;/p&gt;
&lt;p&gt;The process took me roughly a week.&lt;/p&gt;
</content><category term="intern"></category><category term="tutorial"></category></entry></feed>